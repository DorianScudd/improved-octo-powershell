#### Master list of powershell code to use. By Dorian Scudder ####
#### DO NOT RUN ALL AT ONCE ####

### Multi-Faction Authentication
# Connect to Exchange Online Protection and Security & Compliance Center
Connect-IPPSSession -UserPrincipalName <UPN>

#Connect to Exchange Online Service
Connect-EXOPSSession -UserPrincipalName <your UPN>

# Disconnect
Get-PSSession | Remove-PSSession

# Disconnect
Get-PSSession | Remove-PSSession


### Connect to Security & Compliance Center ###
$UserCredential = Get-Credential -credential <email>

# note different URI for Security & Compliance Center
$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection

# If you want to connect to Security & Compliance Center PowerShell in the same window as an active Exchange Online PowerShell
#connection, you need to add the Prefix parameter and value (for example, -Prefix "CC") to the end of this command to prevent 
#cmdlet name collisions (both environments share some cmdlets with the same names). That's this statement below
$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection -Prefix "CC"

Import-PSSession $Session -DisableNameChecking

# Disconnect Session
Remove-PSSession $Session

### Connect to Exchange Online PowerShell Module ###
$UserCredential = Get-Credential
$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection
Import-PSSession $Session -DisableNameChecking

# Disconnect Session
Remove-PSSession $Session

##Connect to SharePoint Online Module
$adminUPN="<admin cred>"
$orgName="<tenantname>"
$userCredential = Get-Credential -UserName $adminUPN -Message "Type the password."
Connect-SPOService -Url https://$orgName-admin.sharepoint.com -Credential $userCredential

##

##Disconnect sharepoint online module (only 1 session per tenant, two consecutive connects, disconnects previous session
Disconnect-SPOService

##Get membership of AD user. remember run-as if complete membership not shown
Get-ADPrincipalGroupMembership username | select name

#Start-ManagedFolderAssistant will not run automatically on mailboxes < 10mb. you cannot force a run on larger mailboxes,
# command will not be enforced. runs at maximum every seven days. Usually throttled anyway on larger mailboxes.
Start-ManagedFolderAssistant <MailboxName>

## Mailbox info (folders, item count, etc)
Get-MailboxFolderStatistics -identity <name> -FolderScope <inbox, calendar, RecoverableItems, etc> | Select-Object name, FolderPath, FolderType, ContainerClass, StorageQuota, VisibleItemsInFolder, HiddenItemsInFolder, FolderSize, ItemsInFolderAndSubfolders, DeletePolicy, ArchivePolicy| ogv

## Get Calendar info
# In Exchange Online, we recommend that you don't use the Search-Mailbox -DeleteContent command to delete
 messages in mailboxes that have auto-expanding archiving enabled. Unexpected data loss may occur.

## Search Mailbox
Search-Mailbox -Identity "<identity>" -SearchQuery kind:meetings -EstimateResultOnly
# Keyword Query Language (KQL) info: https://docs.microsoft.com/exchange/security-and-compliance/in-place-ediscovery/message-properties-and-search-operators

# Mailbox Info
Get-Mailbox -Identity "<identity>"

### AD Info ###

Get-ADGroupMember -Identity <AD Group Name> | Where-Object {$_.samaccountname -like '<samAccountName*'}

#Add-ADGroupMember -Identity <AD Group Name> -Members <UserName> -credential $UserCredential -confirm

#Get-ADGroupMember -Identity <AD Group Name> | Where-Object {$_.samAccountName -lk '<samAccountName>*'}

### Object Properties ###
# Get object information
$date | Get-Member
##get all properties in object
$date | Select-Object -Property *

### Azure Active Directory Sync ###
# Best practice: run from server AAD is on

Import-Module ADSync

##Delta Sync
Start-ADSyncSyncCycle -PolicyType Delta

##Full Sync
Start-ADSyncSyncCycle -PolicyType Initial

# Get find out which groups a mail contact is a member of
$emailContacts = get-contact | Where-Object {$_.WindowsEmailAddress -like '*<domain>.com*'}
foreach ($email in $emailContacts)
{		
    get-distributiongroup | where-object {$_.primarysmtpaddress -eq $email}
}

##Open Azure Active Directory Module for PowerShell on DC with module installed
##Connect and enter credentials. You may need to add authentication sites to safe sites. verify site address before adding
$UserCredential = Get-Credential -credential <admin email>
Import-Module MSOnline
Connect-MsolService #-Credential $UserCredential # leave out credential parameter if you are using MultiFactor Authentication

## change UPN user principal name
Set-MsolUserPrincipalName -UserPrincipalName <name@tenant.onmicrosoft.com -NewUserPrincipalName name@tenant.com

##Get ObjectRoleID for Tenant Adminrole

#$AdminRoleObjectId = Get-MsolRole | Where {$_.name -eq "Company Administrator" } | select-object -property ObjectId

## View "Company Administrators" (roleobject id for rolename "Company Administrator" is <removed>)
Get-MSolRoleMember -roleobjectid $AdminRoleObjectId

## Remove Admin account from tenant admin role
Remove-MsolRoleMember -RoleObjectId $AdminRoleObjectID -RoleMemberType User -RoleMemberEmailAddress "<email@domain>"

## Add Admin back to tenant admin role
Add-MsolRoleMember RoleObjectId = $AdminRole.ObjectId -RoleMemberEmailAddress "<email@domain>"

	#*** OR ***

	Add-MsolRoleMember -RoleName "Company Administrator" -RoleMemberEmailAddress "<email@domain>"
	
##Remove aliases from emails
set-mailbox "<name>" -emailaddresses @{remove="email1[at][domain.com","email2[at]domain.com"}

##Create distribution list
New-DistributionGroup -DisplayName "<Display Name>" -ManagedBy managedby@domain.com -MemberDepartRestriction Closed -MemberJoinRestriction Closed -Members "member1@domain.com","member2@domain.com","member3@domain.com" -Name <name> -PrimarySmtpAddress email[at]domain.com -Type "Distribution"

##Grant sendAs permission
Add-RecipientPermission <Identity> -AccessRights SendAs -Trustee <Identity>

##Add distributiongroup member
#add-distributiongroupmember -identity "<identity>" -member member[at]domain.com

##Add-BulkUsers. import AD module first

$Users = Import-Csv  "C:\filesource\\userlist.csv"

$domain = "@domain[dot]com"
#for each line/user in collection users (csv) get parameters needed for aduser command
ForEach ($User in $Users)
{            
    $Displayname = $User.Lastname  + "," + $User.Firstname
    $UserFirstname = $User.'Firstname'            
    $UserLastname = $User.'Lastname' 
    $SAM = $User.SAM
    $UPN = $User.FirstName + "." + $User.LastName + $domain
    $OU = $User.OU  
    $Password = $User.Password | ConvertTo-SecureString -AsPlainText -Force
    $Description = $User.Description 
    $Manager = $User.Manager
    $Server = $User.DC
               
    New-ADUser -Name "$Displayname" -DisplayName "$Displayname" -SamAccountName $SAM -UserPrincipalName $UPN -GivenName "$UserFirstname" -Surname "$UserLastname" -Description "$Description" -Manager $Manager -AccountPassword $Password -Enabled $true -Path "$OU" -ChangePasswordAtLogon $false â€“PasswordNeverExpires $true #-server $Server
}

##list of all vendors in vendor OU. remember to import AD module
#enter ou where vendors are
$vendorOU = "<vendor ou>" #identity of vendor OU
#get distinguished name of vendor OU
$distinguishedName = Get-ADObject -Filter 'ObjectClass -eq "organizationalUnit" -and name -eq $vendorOU'| Select-Object -Property DistinguishedName
#get users in OU
get-aduser -Filter * -SearchBase $distinguishedName.DistinguishedName -Properties sAMAccountName, Company, CN, Enabled | ft sAMAccountName, Company, Enabled

##focused inbox at mailbox level
get-FocusedInbox -identity <upn>

##Format table info
get-mailboxpermission -identity <identity> | ft -autosize

##Add delegates with full or send as permissions to mailbox or shared mailbox
Add-MailboxPermission -Identity <identity> -AccessRights FullAccess -User <email of person getting full access> -InheritanceType all
Add-RecipientPermission -Identity <identity> -AccessRights SendAs -Trustee <email of person getting sendas permission>

##Office365 Group management
Get-UnifiedGroup -Identity <email identity> | Select-Object * /#field "EmailAddresses" stores aliases

#Get messagetrace detail info
$messageinfo = Get-MessageTrace -RecipientAddress <address> -SenderAddress <address> -StartDate 04/25/2019 -EndDate 05/03/2019 | select-object messageid, messagetraceid

#i grab the messageid in $messageinfo in case i need it for something else. otherwise, just select messagetraceid
get-messagetracedetail -MessageTraceId $messageinfo.MessageTraceId -RecipientAddress <address>

##start mail trace for > 10 days.
Start-HistoricalSearch -EndDate 05/02/2019 -StartDate 04/02/2019 -ReportTitle "<Name of Report>" -ReportType MessageTrace -RecipientAddress <recipientemail> -NotifyAddress <email of person to be notified>

##get list of recent historical search mail traces. gives jobID status, rows, and any error info.
Get-HistoricalSearch  | ft -AutoSize 

##get members of groups 
$grpOfDistros = Get-ADGroup -Filter 'name -like "<name starts with>*"' | Select-Object name
foreach ($item in $grpOfDistros)
{
	#new line after group and after list of members
    $grpMembers = Get-ADGroupMember -Identity $item.name  | Select-Object user, samaccountname
    write-host "Group: " $item.name `n
    Write-Host "Members: " $grpMembers.samAccountName `n
}

##Enable ActiveSync Exchange Logging. Runs up to 48hrs on exhange online, runs up to 72 hrs on exchange server
Set-CASMailbox <alias> -ActiveSyncDebugLogging:$true
##Retrieve logs
Get-MobileDeviceStatistics -Mailbox alias -GetMailboxLog:$true -NotificationEmailAddresses "<notificationEmail>"

##get security and compliance roles and their members. connect w/ to security and compliance module first
$rolegroups = Get-RoleGroup | Select name

foreach ($item in $rolegroups)
{
    $item.Name
    Get-RoleGroupMember -Identity $item.name | Select-Object name
    write-host `n
}
# would like to get this piped version to work properly
Get-RoleGroup | Select name | foreach-object {"$_.name `n"; Get-RoleGroupMember -Identity $_.name}

##Group Policy Export
Import-Module GroupPolicy
Get-GPOReport -All -ReportType HTML -Path c:\Users\<user>\desktop\GPOExport.html
#win 10 and win sever 2016 PowerShell
#https://docs.microsoft.com/en-us/powershell/module/grouppolicy/?view=win10-ps

##Backup all GPO Policies
Backup-GPO -All -Path <Path to save policy folders to>

##Restore all GPO Policies
Restore-GPO -All -Path <Path of GPO backup folders>

##"Copy" distro grp members". import activedirectory module first
$sourceGroup = "<source>"
$targetGroup = "<target>"
Get-ADGroupMember -Identity $sourceGroup |foreach { Add-ADGroupMember -Identity $targetGroup -Members $($_.DistinguishedName) }


##DFSR report. DFS replication report.
$path = "<enter path>"
if (!(test-path -Path $path))
{
    New-Item -ItemType Directory -Path $path -Value "healthreports"
}
$groupName = Get-DfsReplicationGroup | Select-Object -Property GroupName | % -Process {write-dfsrhealthreport -groupname $_.GroupName -Path $path}

##List of Possible ADObject attributes
## Ian Farr https://blogs.technet.microsoft.com/poshchap/2017/09/22/one-liner-query-the-ad-schema-for-user-object-attributes/
Get-ADObject -SearchBase (Get-ADRootDSE).SchemaNamingContext -Filter {name -like "User"} -Properties MayContain,SystemMayContain |
Select-Object @{n="Attributes";e={$_.maycontain + $_.systemmaycontain}} | 
Select-Object -ExpandProperty Attributes |
Sort-Object

##List of constructed attributes
##Ian Farr https://blogs.technet.microsoft.com/poshchap/2017/09/22/one-liner-query-the-ad-schema-for-user-object-attributes/
Get-ADObject -SearchBase (Get-ADRootDSE).SchemaNamingContext -ldapfilter '(systemFlags:1.2.840.113556.1.4.803:=4)' -Properties systemFlags |
Select-Object Name |
Sort-Object Name

##Account Lockout Search
##Ian Farr https://blogs.technet.microsoft.com/poshchap/2014/05/16/tracing-the-source-of-account-lockouts/

#Obtain user

$User = Read-Host -Prompt "Please enter a user name"

#Specify PDCe

$PDC = Get-ADDomainController -Discover -Service PrimaryDC

#Collect lockout events for user from last hour

Get-WinEvent -ComputerName $PDC.Name -Logname Security -FilterXPath "*[System[EventID=4740 and TimeCreated[timediff(@SystemTime) <= 3600000]] and EventData[Data[@Name='TargetUserName']='$User']]" | Select-Object TimeCreated,@{Name='User Name';Expression={$_.Properties[0].Value}},@{Name='Source Host';Expression={$_.Properties[1].Value}}

#Get name and email of o365 mailboxes for active AD Users
$SearchBase = "<distinguishedname>"
$activeEmployeeList = get-aduser -Filter * -SearchBase $SearchBase | Select-Object name,userprincipalname

$x = foreach ($item in $activeEmployeeList)
{
    Get-User $item.userprincipalname | Where-Object {$_.RecipientType -eq 'UserMailbox'} | Select-Object name,userprincipalname
}

#Content in MB of OneDrive Usage
$TenantUrl = "https://[tenant]-admin.sharepoint.com"
$CSVFile = [Environment]::GetFolderPath("Desktop") + "\OneDriveSites $(get-date -f yyyy-MM-dd).csv"
Connect-SPOService -Url $TenantUrl
Get-SPOSite -IncludePersonalSite $true -Limit all -Filter "Url -like '-my.sharepoint.com/personal/'" | select storageusagecurrent,url,owner,title,status,lastcontentmodifieddate | export-csv -path $CSVFile -notypeinformation

# return members of large distro lists
# https://www.petri.com/enumerating-members-of-large-active-directory-groups

Function Get-MyLargeGroup2 {
[cmdletbinding()]
Param(
[Parameter(Position=0,ValueFromPipeline,ValueFromPipelineByPropertyName)]
[ValidateNotNullorEmpty()]
[string]$Name,
[string[]]$Properties = @("SamAccountname","Title","Description","Department")
)
 
Begin {
    Write-Verbose "Starting $($MyInvocation.MyCommand)"
    #add default properties
    $Properties += "ObjectClass"
    $Properties += "Name"
    $Properties += "DistinguishedName"
 
    Write-verbose "retrieving these user properties"
    Write-Verbose ( $Properties -join "," | Out-String)
} #begin
 
Process {
Write-Verbose "Retrieving members from $Name"
$mygroup = Get-ADGroup -Identity $Name -Properties Members
 
foreach ($member in $mygroup.members) {
  $object = $member | Get-ADObject -Properties $properties
  if ($object.ObjectClass -eq 'Group') {
    Write-Verbose "Found nested group $($object.distinguishedname)"
    #recursively run this command for the nested group
    & $MyInvocation.MyCommand -name $object.Name
  } 
  elseif ($object.objectclass -eq 'User') {
    Select-Object -InputObject $object -property $Properties
  }
} #foreach
} #process
 
End {
    Write-Verbose "Ending $($MyInvocation.MyCommand)"
} #end
 
} #end function

#####################################################

<#
.Synopsis
   Creates an inbox redirect rule for more than one mailbox user
.DESCRIPTION
   Creates an inbox redirect rule for more than one mailbox user. Supply path to mailbox users, rule name, redirect address and exceptions.
.EXAMPLE
   New-InboxRuleForGroup -PathToInboxRuleUsers c:\temp\userlist.csv -RedirectTo redir@[rediraddress].com -InboxRuleName "Redirect Rule Name"
.EXAMPLE
   Another example of how to use this cmdlet
#>
function New-InboxRuleForGroup
{
    [CmdletBinding()]
    [OutputType([int])]
    Param
    (
        # Path to csv that has list of users that will get the inbox rule applied to. csv header is "Email".
        [Parameter(Mandatory=$true,
                   ValueFromPipelineByPropertyName=$true,
                   Position=0)]
        $PathToInboxRuleUsers,

        # Email address to redirect mail to
        [string]
        $RedirectTo,

        # Name of Inbox Rule as it shoud appear in User's mailbox rule section
        [string]
        $InboxRuleName
    )

    $UsersToModify = Import-Csv -Path $pathToInboxRuleUsers
    $exceptionList = "[comma-separated list of email addresses]"

    foreach ($item in $UsersToModify)
    {
        $email = $item.Email
    
        New-InboxRule -Mailbox $email -Name $InboxRuleName -RedirectTo $redirectTo -ExceptIfFrom $exceptionList -ExceptIfMessageTypeMatches Calendaring
    }
}
