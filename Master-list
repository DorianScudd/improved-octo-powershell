#### Master list of powershell code to use. By Dorian Scudder ####
#### DO NOT RUN ALL AT ONCE ####

### Connect to Security & Compliance Center ###
$UserCredential = Get-Credential

# note different URI for Security & Compliance Center
$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection

# If you want to connect to Security & Compliance Center PowerShell in the same window as an active Exchange Online PowerShell
#connection, you need to add the Prefix parameter and value (for example, -Prefix "CC") to the end of this command to prevent 
#cmdlet name collisions (both environments share some cmdlets with the same names). That's this statement below
$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection -Prefix "CC"

Import-PSSession $Session -DisableNameChecking

# Disconnect Session
Remove-PSSession $Session

### Connect to Exchange Online PowerShell Module ###
$UserCredential = Get-Credential
$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection
Import-PSSession $Session -DisableNameChecking

# Disconnect Session
Remove-PSSession $Session

#Start-ManagedFolderAssistant will not run automatically on mailboxes < 10mb. you cannot force a run on larger mailboxes,
# command will not be enforced. runs at maximum every seven days. Usually throttled anyway on larger mailboxes.
Start-ManagedFolderAssistant <MailboxName>

## Mailbox info (folders, item count, etc)
Get-MailboxFolderStatistics -identity <name> -FolderScope <inbox, calendar, RecoverableItems, etc> | Select-Object name, FolderPath, FolderType, ContainerClass, StorageQuota, VisibleItemsInFolder, HiddenItemsInFolder, FolderSize, ItemsInFolderAndSubfolders, DeletePolicy, ArchivePolicy| ogv

## Get Calendar info
# In Exchange Online, we recommend that you don't use the Search-Mailbox -DeleteContent command to delete
 messages in mailboxes that have auto-expanding archiving enabled. Unexpected data loss may occur.

## Search Mailbox
Search-Mailbox -Identity "<identity>" -SearchQuery kind:meetings -EstimateResultOnly
# Keyword Query Language (KQL) info: https://docs.microsoft.com/exchange/security-and-compliance/in-place-ediscovery/message-properties-and-search-operators

# Mailbox Info
Get-Mailbox -Identity "<identity>"

### AD Info ###

Get-ADGroupMember -Identity <AD Group Name> | Where-Object {$_.samaccountname -like '<samAccountName*'}

#Add-ADGroupMember -Identity <AD Group Name> -Members <UserName> -credential $UserCredential -confirm

#Get-ADGroupMember -Identity <AD Group Name> | Where-Object {$_.samAccountName -lk '<samAccountName>*'}

### Object Properties ###
# Get object information
$date | Get-Member
##get all properties in object
$date | Select-Object -Property *

### Azure Active Directory Sync ###
# Best practice: run from server AAD is on

Import-Module ADSync

##Delta Sync
Start-ADSyncSyncCycle -PolicyType Delta

##Full Sync
Start-ADSyncSyncCycle -PolicyType Initial

# Get find out which groups a mail contact is a member of
$emailContacts = get-contact | Where-Object {$_.WindowsEmailAddress -like '*<domain>.com*'}
foreach ($email in $emailContacts)
{		
    get-distributiongroup | where-object {$_.primarysmtpaddress -eq $email}
}

##Open Azure Active Directory Module for PowerShell on DC with module installed
##Connect and enter credentials. You may need to add authentication sites to safe sites. verify site address before adding
#Connect-MsolService

##Get ObjectRoleID for Tenant Admin role

#$AdminRoleObjectId = Get-MsolRole | Where {$_.name -eq "Company Administrator" } | select-object -property ObjectId

## View "Company Administrators" (roleobject id for rolename "Company Administrator" is <removed>)
Get-MSolRoleMember -roleobjectid $AdminRoleObjectId

## Remove Admin account from tenant admin role
Remove-MsolRoleMember -RoleObjectId $AdminRoleObjectID -RoleMemberType User -RoleMemberEmailAddress "<email@domain>"

## Add Admin back to tenant admin role
Add-MsolRoleMember RoleObjectId = $AdminRole.ObjectId -RoleMemberEmailAddress "<email@domain>"

	#*** OR ***

	Add-MsolRoleMember -RoleName "Company Administrator" -RoleMemberEmailAddress "<email@domain>"
	
##Remove aliases from emails
set-mailbox "<name>" -emailaddresses @{remove="email1[at][domain.com","email2[at]domain.com"}

##Create distribution list
#New-DistributionGroup -DisplayName "<Display Name>" -ManagedBy managedby@domain.com -MemberDepartRestriction Closed -MemberJoinRestriction Closed -Members "member1@domain.com","member2@domain.com","member3@domain.com" -Name <name> -PrimarySmtpAddress email[at]domain.com -Type "Distribution"

##Add distributiongroup member
#add-distributiongroupmember -identity "<identity>" -member member[at]domain.com

##Add-BulkUsers. import AD module first

$Users = Import-Csv  "C:\filesource\\userlist.csv"

$domain = "@domain[dot]com"
#for each line/user in collection users (csv) get parameters needed for aduser command
ForEach ($User in $Users)
{            
    $Displayname = $User.Lastname  + "," + $User.Firstname
    $UserFirstname = $User.'Firstname'            
    $UserLastname = $User.'Lastname' 
    $SAM = $User.SAM
    $UPN = $User.FirstName + "." + $User.LastName + $domain
    $OU = $User.OU  
    $Password = $User.Password | ConvertTo-SecureString -AsPlainText -Force
    $Description = $User.Description 
    $Manager = $User.Manager
    $Server = $User.DC
               
    New-ADUser -Name "$Displayname" -DisplayName "$Displayname" -SamAccountName $SAM -UserPrincipalName $UPN -GivenName "$UserFirstname" -Surname "$UserLastname" -Description "$Description" -Manager $Manager -AccountPassword $Password -Enabled $true -Path "$OU" -ChangePasswordAtLogon $false â€“PasswordNeverExpires $true #-server $Server
}

##list of all vendors in vendor OU. remember to import AD module
#enter ou where vendors are
$vendorOU = "<vendor ou>" #identity of vendor OU
#get distinguished name of vendor OU
$distinguishedName = Get-ADObject -Filter 'ObjectClass -eq "organizationalUnit" -and name -eq $vendorOU'| Select-Object -Property DistinguishedName
#get users in OU
get-aduser -Filter * -SearchBase $distinguishedName.DistinguishedName -Properties sAMAccountName, Company, CN, Enabled | ft sAMAccountName, Company, Enabled

##focused inbox at mailbox level
get-FocusedInbox -identity <upn>

##Format table info
get-mailboxpermission -identity <identity> | ft -autosize

##Add delegates with full or send as permissions to mailbox or shared mailbox
Add-MailboxPermission -Identity <identity> -AccessRights FullAccess -User <email of person getting full access> -InheritanceType all
Add-RecipientPermission -Identity <identity> -AccessRights SendAs -Trustee <email of person getting sendas permission>
